@inherits LayoutComponentBase

<div class="navbar fixed-top text-white">
    <div class="logo">
        <a href="/" class="bg-white">
            <img height="29" width="300" src="" />
        </a>
    </div>

    <div class="search-box">
        <div class="input-group">
            <div class="form-outline">
                <input type="search" class="form-control small" @bind-value="@searchText" @bind-value:event="oninput" @onkeypress="@SearchKeyDown" @onfocusout="@OnSearchFocusOut" placeholder="Search inSozluk" />
            </div>
            <button type="button" class="btn btn-sozluk btn-success" @onclick="@Search" @onfocusout="@OnSearchFocusOut">
                <i class="fa fa-search h-75"></i>
            </button>
        </div>

        @if (showSearchResult)
        {
            <ul class="list-group">
                @foreach (var searchItem in searchResults)
                {
                    <li class="list-group-item">
                        <a @onclick="(async()=> await GoEntry(searchItem.Id))">
                            @searchItem.Subject
                        </a>
                    </li>
                }
            </ul>
        }
    </div>

    @*     <AuthorizeView>
    <Authorized>
    <div class="top-nav">
    <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Create Entry" @onclick="@NavigateCreateEntryPage" />
    <input type="button" class="form-control btn-success btn-sozluk w-auto" value="ME" @onclick="@NavigateMEPage" />
    <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Logout" @onclick="@NavigateLoginPage" />
    </div>
    </Authorized>

    <NotAuthorized> *@
    <div class="top-nav">
        <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Login" @onclick="@NavigateLoginPage" />
    </div>
    @*         </NotAuthorized>
    </AuthorizeView> *@

    <div class="sub-nav">
        <a class="sub-nav-item active">bugun</a>
        <a class="sub-nav-item">gundem</a>
        <a class="sub-nav-item">debe</a>
        <a class="sub-nav-item">sorunsallar</a>
        <a class="sub-nav-item">takip</a>
        <a class="sub-nav-item">son</a>
        <a class="sub-nav-item">kenar</a>
        <a class="sub-nav-item">caylaklar</a>
    </div>
</div>

<div class="page">
    <div class="sidebar">
        <h5 class="text-white text-center sidebar-header">@EntriesSubject</h5> @* TODO *@

        <a class="more-data" @onclick="@RefreshEntries">refresh</a>
        <ul class="list-group">
            <EntriesComponent @ref="@entriesComponent" />
        </ul>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private EntriesComponent entriesComponent;
    private string searchText;
    private bool showSearchResult;
    private List<SearchEntryViewModel> searchResults = new List<SearchEntryViewModel>();

    public string EntriesSubject { get; set; } = "bugun";

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    IEntryService entryService { get; set; }

    private async Task RefreshEntries()
    {
        await entriesComponent.RefreshList();
    }

    private void NavigateMEPage()
    {
        navigationManager.NavigateTo("/me");
    }

    private void NavigateLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    private void NavigateLogoutPage()
    {
        navigationManager.NavigateTo("/logout");
    }

    private void NavigateCreateEntryPage()
    {
        navigationManager.NavigateTo("/createEntry");
    }

    private async Task SearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }
    }

    private async Task OnSearchFocusOut()
    {
        await Task.Delay(100);
        if (showSearchResult)
            showSearchResult = true;
    }

    private async Task Search()
    {
        if (string.IsNullOrEmpty(searchText))
            return;

        searchResults = await entryService.SearchBySubject(searchText);

        showSearchResult = true;
        searchText = string.Empty;
    }

    private async Task GoEntry(Guid entryId)
    {
        await OnSearchFocusOut();
        navigationManager.NavigateTo($"/entry/{entryId}");
    }
}
